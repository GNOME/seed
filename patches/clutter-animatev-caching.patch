diff --git a/clutter/clutter-animation.c b/clutter/clutter-animation.c
index 9c16208..6b866e2 100644
--- a/clutter/clutter-animation.c
+++ b/clutter/clutter-animation.c
@@ -1986,24 +1986,16 @@ clutter_actor_animatev (ClutterActor        *actor,
   g_return_val_if_fail (properties != NULL, NULL);
   g_return_val_if_fail (values != NULL, NULL);
 
-  animation = g_object_get_qdata (G_OBJECT (actor), quark_object_animation);
-  if (animation == NULL)
-    {
-      /* if there is no animation already attached to the actor,
-       * create one and set up the timeline and alpha using the
-       * current values for duration, mode and loop
-       */
-      animation = clutter_animation_new ();
-      clutter_animation_set_object (animation, G_OBJECT (actor));
-
-      g_signal_connect (animation, "completed",
-                        G_CALLBACK (on_animation_completed),
-                        NULL);
+  /* if there is no animation already attached to the actor,
+   * create one and set up the timeline and alpha using the
+   * current values for duration, mode and loop
+   */
+  animation = clutter_animation_new ();
+  clutter_animation_set_object (animation, G_OBJECT (actor));
 
-      CLUTTER_NOTE (ANIMATION, "Created new Animation [%p]", animation);
-    }
-  else
-    CLUTTER_NOTE (ANIMATION, "Reusing Animation [%p]", animation);
+  g_signal_connect (animation, "completed",
+                    G_CALLBACK (on_animation_completed),
+                    NULL);
 
   /* force the update of duration and mode using the new
    * values coming from the parameters of this function
@@ -2063,20 +2055,12 @@ clutter_actor_animate_with_timelinev (ClutterActor        *actor,
   g_return_val_if_fail (properties != NULL, NULL);
   g_return_val_if_fail (values != NULL, NULL);
 
-  animation = g_object_get_qdata (G_OBJECT (actor), quark_object_animation);
-  if (animation == NULL)
-    {
-      animation = clutter_animation_new ();
-      clutter_animation_set_object (animation, G_OBJECT (actor));
-
-      g_signal_connect (animation, "completed",
-                        G_CALLBACK (on_animation_completed),
-                        NULL);
+  animation = clutter_animation_new ();
+  clutter_animation_set_object (animation, G_OBJECT (actor));
 
-      CLUTTER_NOTE (ANIMATION, "Created new Animation [%p]", animation);
-    }
-  else
-    CLUTTER_NOTE (ANIMATION, "Reusing Animation [%p]", animation);
+  g_signal_connect (animation, "completed",
+                    G_CALLBACK (on_animation_completed),
+                    NULL);
 
   clutter_animation_set_mode (animation, mode);
   clutter_animation_set_timeline (animation, timeline);
@@ -2139,20 +2123,12 @@ clutter_actor_animate_with_alphav (ClutterActor        *actor,
       return NULL;
     }
 
-  animation = g_object_get_qdata (G_OBJECT (actor), quark_object_animation);
-  if (animation == NULL)
-    {
-      animation = clutter_animation_new ();
-      clutter_animation_set_object (animation, G_OBJECT (actor));
-
-      g_signal_connect (animation, "completed",
-                        G_CALLBACK (on_animation_completed),
-                        NULL);
+  animation = clutter_animation_new ();
+  clutter_animation_set_object (animation, G_OBJECT (actor));
 
-      CLUTTER_NOTE (ANIMATION, "Created new Animation [%p]", animation);
-    }
-  else
-    CLUTTER_NOTE (ANIMATION, "Reusing Animation [%p]", animation);
+  g_signal_connect (animation, "completed",
+                    G_CALLBACK (on_animation_completed),
+                    NULL);
 
   clutter_animation_set_alpha (animation, alpha);
   clutter_animation_setupv (animation, n_properties, properties, values);
