<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<title>Seed sqlite Module Documentation</title>
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<link rel="stylesheet" href="../style.css" type="text/css" charset="utf-8" />
	<script type="text/javascript" src="../sh.js"></script>
    <script type="text/javascript" src="../sh_js.js"></script>
    <link type="text/css" rel="stylesheet" href="../sh.css" />
</head>
<body onload="sh_highlightDocument();">
<div id="header">Seed <i>sqlite</i> Module</div>
<div id="subheader">v.@VERSION@</div>
<div class="section"><b>Usage</b></div>
<p>
In order to use functions from the sqlite module, you must first import it:
</p>
<pre class="sh_javascript">
Seed.import_namespace("sqlite");
</pre>
<div class="section"><b>Enums</b></div>
<p>
The SQLite module provides a selection of status enums which are used as the return values of functions, and inform the calling function of the result of the operation.
</p>
<pre class="sh_javascript">
sqlite.[OK, ERROR, INTERNAL, PERM ABORT, BUSY,
        LOCKED, NOMEM, READONLY, INTERRUPT, CORRUPT,
        NOTFOUND, FULL, CANTOPEN, PROTOCOL, EMPTY,
        SCHEMA, TOOBIG, CONSTRAINT, MISMATCH, MISUSE,
        NOLFS, AUTH, FORMAT, RANGE, NOTADB, ROW, DONE]
</pre>
<div class="section"><b>new sqlite.Database</b>(filename)</div>
<p>
Constructs a new sqlite.Database, opening the SQLite database in the given file (and creating the file if it doesn't exist). Returns an object; the <i>status</i> property on the returned object is one of the SQLite status enums.
</p>
<pre class="sh_javascript">
var db = new sqlite.Database("people.db");
</pre>
<div class="section">database.<b>exec</b>(command, <i>callback</i>)</div>
<p>
Executes the SQLite <i>command</i> on the given database. If <i>callback</i> is defined, it is called with each table entry returned from the given command, with a single argument. The callback argument has properties on it for each value in the returned table entry.
</p>
<p>
Keep in mind that, just like in C, you have to sanitize user input in your SQL before passing it to the database, otherwise it's <i>very</i> easy to craft input that can wreak havoc on your database. We plan to have a sanitization function, as well as an API similar to the C one, where you can pass values into <b>exec</b> after the command string, and they are substituted into the command <i>by</i> SQLite, so as to avoid potential injection problems.
</p>
<pre class="sh_javascript">
db.exec("create table people (key INTEGER PRIMARY KEY, name TEXT," +
                             "age INTEGER, phone TEXT);");
db.exec("insert into people(name, age, phone) " + 
                    "values('John Smith', 24, '555-123-4567');");

function cb_print_phone(results)
{
    Seed.print(results.phone);
}

db.exec("select from people where name='John Smith';", cb_print_phone);
</pre>
<div class="section">database.<b>close</b>()</div>
<p>
Closes a SQLite database and syncs.
</p>
<pre class="sh_javascript">
db.close();
</pre>
</body>
</html>
