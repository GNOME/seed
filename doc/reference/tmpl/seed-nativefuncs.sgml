<!-- ##### SECTION Title ##### -->
Creating native functions

<!-- ##### SECTION Short_Description ##### -->
C functions as first-class JavaScript objects

<!-- ##### SECTION Long_Description ##### -->
<para>
Exposing native C functions to JavaScript is one of the fundamental use cases for libseed when used in an embedding environment; if your application cannot be introspected, or you only have a small number of functions to expose, this is the simplest way to do that.
</para>

<para>
All native C callbacks should have the prototype of SeedFunctionCallback(). 
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### USER_FUNCTION SeedFunctionCallback ##### -->
<para>

</para>

@ctx: A #SeedContext
@function: The #SeedObject representing the function
@this_object: The #SeedObject representing the "this" object in the caller
@argument_count: The number of arguments passed into the callback
@arguments: An array of #SeedValues; the value of the arguments passed in
@exception: A reference to a #SeedException; use seed_make_exception() in order
            to throw a JavaScript exception from the callback.
@Returns: The #SeedValue to return to the caller


<!-- ##### FUNCTION seed_make_function ##### -->
<para>

</para>

@ctx: 
@func: 
@name: 
@Returns: 


<!-- ##### FUNCTION seed_create_function ##### -->
<para>

</para>

@ctx: 
@name: 
@func: 
@obj: 


